# This script is intended to be executed by CMake directly
# Manually executing this script should not be necessary other than debugging purposes

import sys
import os
import argparse
import itertools

parser = argparse.ArgumentParser(description="Generate explicit instantiations of SparseBase template classes")
parser.add_argument('--vals', nargs='+', type=str, help= "C++ data types used for variables storing IDs")
parser.add_argument('--sets', nargs='+', type=str, help= "C++ data types used for variables storing IDs")
parser.add_argument('--output-folder', type=str, help= "Path to output folder to store resultant files")

args = parser.parse_args()

vals = ' '.join(args.vals).split(',')
sets = ' '.join(args.sets).split(',')
output_folder = args.output_folder

os.makedirs(output_folder, exist_ok=True)

comb_types = list(itertools.product(vals, sets))
already_added = set()

def reset_file(filename, folder=output_folder):
    path = os.path.join(folder, filename)
    out = open(path, "w+")
    out.write("// Automatically generated by " + os.path.basename(__file__) + "\n\n")
    out.close()


def gen_inst(template, filename, ifdef=None, folder=output_folder):

    path = os.path.join(folder, filename)
    out = open(path, "a")

    out.write("// Generated from: " + template + "\n")

    if ifdef is not None:
        out.write("#ifdef " + ifdef + "\n")

    for types in comb_types:
        inst = template.replace("$vals", types[0])
        inst = inst.replace("$sets", types[1])

        key = folder + ":" + filename + ":" + inst

        if key not in already_added:
            already_added.add(key)
            out.write("template " + inst + ";\n")

    if ifdef is not None:
        out.write("#endif\n")

    out.write("\n")
    out.close()



# Format
reset_file("json.inc")
gen_inst("   void JSONWrapper::Set<$vals>(std::string key, $vals value)", "json.inc")
gen_inst("   void JSONWrapper::NestedSet<$vals>(std::string key1, std::string key2,$vals value)", "json.inc")
gen_inst("   void JSONWrapper::NestedSet<$vals>(std::string key1, std::string key2,std::string key3,$vals value)", "json.inc")
gen_inst("   void JSONWrapper::NestedSet<$vals>(std::string key1, std::string key2, std::string key3, std::string key4, $vals value)", "json.inc")
gen_inst("   void JSONWrapper::Set<$sets>(std::string key, $sets value)", "json.inc")
gen_inst("   void JSONWrapper::NestedSet<$sets>(std::string key1, std::string key2,$sets value)", "json.inc")
gen_inst("   void JSONWrapper::NestedSet<$sets>(std::string key1, std::string key2,std::string key3,$sets value)", "json.inc")
gen_inst("   void JSONWrapper::NestedSet<$sets>(std::string key1, std::string key2, std::string key3, std::string key4, $sets value)", "json.inc")
gen_inst("   $vals JSONWrapper::Get<$vals>(std::string key)", "json.inc")
gen_inst("   $vals JSONWrapper::NestedGet<$vals>(std::string key, std::string key2)", "json.inc")
gen_inst("   $vals JSONWrapper::NestedGet<$vals>(std::string key, std::string key2, std::string key3)", "json.inc")
gen_inst("   $vals JSONWrapper::NestedGet<$vals>(std::string key, std::string key2, std::string key3, std::string key4)", "json.inc")

# Format (CUDA)
